ORACLE

1. table
데이터 저장단위

2.schema
연관있는 tables 구분
일종의 directory

user를 생성하면 schema가 생성되므로
user-schema 일심동체
*schema에 특칭 지정하지 않으면 user name이 곧 schema 


3.계정 생성

command키 누른 뒤 cmd->명령 프롬프트->sqlplus 작성

enter하고자 하면 sys AS SYSDBA->비번 알아서 작성-> 관리자 권한 접속

나만의 계정을 만들기 위해 GRANT DBA TO suyeon;->비번 작성->계정 생성


*외울 필요 없고 검색창에 CREATE TABLE REFERENCES ORACLE 치면 방법 나옴
*해당 페이지 syntax에 네모-언어, 동그라미-내가 작성할 것(임의), 화살표-따라가면 됨
*언어는 대문자로 적음

4. table 생성
CREATE TABLE REFERNCES ORACLE 치면 나옴

CREATE TABLE topic(id number not null, title varchar2(50) not null, description varchar2(4000) null, created date not null);


5.table list 확인
TABLE LIST ORACLE 검색

SELECT table_name
from all_tables
where owner='SUYEON';

하면 보여줌.

*해보니까 owner 이름 소문자로 하면 안 찾아짐(why?)


6.table row 삽입
Insert into topic(id, title, description, created) values('1', 'ORACLE', 'ORACLE IS ...', SYSDATE);
Insert into topic(id, title, description, created) values('2', 'MySQL', 'MySQL IS ...', SYSDATE);
Insert into topic(id, title, description, created) values('3', 'SQL Server', 'SQL Server IS ...', SYSDATE);
commit;

*해보니까 각 insert into구문 당 ; 해줘야 삽입 완료
*commit; 까지 해줘야 삽입명령 실행 완료

7.sql 쓰는 이유
70년대에 codd가 고안한 관계형 데이터베이스 모델 이용
spreadsheet 이용하면 정보가 늘어났을 때 저장용량 제한
sql(structured query language) 쓰면 
장점
1. 저장용량 무제한
2. 데이터 가공 명령어로 간단히=자동화


8.정렬, 페이징
select * from topic order by id desc;

select * from topic
offset 0 rows
fetch next 2 rows only;

*내가 컴퓨터에 깐 버전은 11g, 수업에 사용되는 건 18c 
11g에는 offset-fetch 존재 안 함


9. primary key, pk
CREATE TABLE topic(id number not null, title varchar2(50) not null, description varchar2(4000) null, created date not null, CONSTRAINT PK_TOPIC PRIMARY KEY(id));

Insert into topic(id, title, description, created) values('1', 'MySQL', 'MySQL IS ...', SYSDATE);
넣으면 error: unique 제약

따라서 다음번호를 넣어봐야지 하고 생각하게 만들어줌(일일이 번호 확인할 필요 없이)


10. sequence
sequence를 만들면 values에 들어가는 '1, 2, 3, ...' 일일이 넣을 필요 없음
그러기 위해선 sequence 먼저 만들어야 함

CREATE SEQUENCE seq.topic;

그 다음에 미리 해뒀던 거 지우고 다시 해야 충돌 안 나니까 지워준다
DELETE FROM topic;

commit;
*delete는 항상 조심해서 쓰자. 백업 안 해놓으면 다 날아간다.

Insert into topic(id, title, description, created) values(seq_topic.NEXTVAL, 'ORACLE', 'ORACLE IS ...', SYSDATE);
insert into topic(id, title, description, created) values(seq_topic.NEXTVAL, 'MySQL', 'MySQL IS ...', SYSDATE);
insert into topic(id, title, description, created) values(seq_topic.NEXTVAL, 'SQL Server', 'SQL Server IS ...', SYSDATE);
insert into topic(id, title, description, created) values(seq_topic.NEXTVAL, 'MongoDB', 'MongoDB IS ...', SYSDATE);

commit;

그러고 확인한다.
SELECT seq_topic.CURRVAL FROM topic;

근데 이러면 table에 데이터가 저장돼 있는 관계로 
행이 세 개면 
행 
3
3
3
이러니까
DUAL이라는 걸 쓰자. 가상의 것.

SELECT seq_topic.CURRVAL FROM DUAL;


[요약]

행 삽입-순번 자동화

CREATE TABLE topic(,,,CONSTRAINT pk_topic PRIMARY KEY(id));

CREATE SEQUENCE seq_topic;

INSERT INTO topic(,,,) VALUES(seq_topic.NEXTVAL, ,,);

확인: SELECT id, title FROM topic;

확인2: SELECT seq_topic.CURRVAL FROM DUAL;


*NEXTVAL와 CURRVAL는 짝꿍이다.


11. SERVER와 CLIENT
컴퓨터 한 대-HOST
DB를 가진 컴퓨터 역할: 서비스 제공자, 즉 SERVER
DATA를 요청하는 컴퓨터 역할: 서비스 의뢰, 즉 CLIENT

SERVER에 ORACLE이 깔리는 것
CLIENT에 sqlplus가 깔리는 것 ex.sql developer, toad, etc
따라서 만든 걸 보기 좋게 확인하려면
GUI 환경에 맞게 만든 sqlplus 같은 프로그램으로 확인하면 됨.


여러 대의 컴퓨터가 SERVER에 QUERY 날려서 DATA 얻는다!



12. sql developer
이름은 suyeon-oracle

role은 기본값으로 했다. SYSDBA도 가능하다고 하는데 해보니까 나는 안 됐다. 권한 불충분.

local로 하면 개인 컴퓨터에 SERVER, CLIENT 역할 모두라는 건데 test 눌렀더니 안 돼서
그냥 기본값으로 했다.


oracle 접속 우클릭-새 접속 또는 + 버튼하면 내가 만든 디벨로퍼 창 뜬다.
SELECT * FROM topic하고 play 버튼 누르면 하단 창에 뜬다.
또는 더블클릭으로 테이블 들어가서 확인하는 방법도 있다.


13. sql developer로 조인하기
*sqlplus로 해도 됨

[topic]

select * from topic; 하면 기존에 sqlplus에서 작성한 table 볼 수 있다.

topic 창에서 열 누르고 authour_id number 추가해준다.
실행 

authour_id에 숫자 채워준다.(밑에 만들 authour에 맞게)


[authour]

authour라는 테이블을 새 테이블로 만들어준다.

name: authour, attributes: id number, name varchar2, profile varchar2(50)


테이블에 data 삽입한다.

insert into authour(id, name, profile) values(seq_authour.nextval, ,,);


[외부 조인]

이제 외부 조인한다. 

select * from topic
	left join authour
	on topic.authour_id=authour.id;

*이거 땜에 애 먹었다. 맨 앞 단어는 table명이고 뒤에는 attribute인 걸 잊지말자.

그럼 두 표가 붙은 걸 확인할 수 있다.



이제 조인된 새로운 표에 명령하자.(이 표는 left join으로 계속 따라써야 한다.)

select id, title, name from topic으로 첫 행 바꿔서 다시 해보자.

그럼 ambiguerly error가 뜰 거다. id가 어떤 테이블의 id인지 명확히 해주자.

id->topic.id
*주의주의-topic 테이블 지칭이다.



select topic.id, title, name
	from topic
	left join authour
	on topic.authour_id=authour.id



별칭을 지정해 명령문 간단히 하자.

select T.id TOPIC_ID, title, name
	from topic T
	left join authour A
	on T.authour_id=A.id



원하는 topic.id에 맞춰 찾아보자

select T.id TOPIC_ID, title, name
	from topic T
	left join authour A
	on T.authour_id=A.id
	where T.id=1;

